import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import GridSearchCV
from sklearn.naive_bayes import GaussianNB

gene_expression_data = pd.read_csv(GENE_EXPRESSION_DATA)
methylation_data = pd.read_csv(METHYLATION_DATA)

common_gene_ids = set(gene_expression_data['gene id']).intersection(methylation_data['gene id'])
filtered_gene_expression_data = gene_expression_data[gene_expression_data['gene id'].isin(common_gene_ids)]
filtered_methylation_data = methylation_data[methylation_data['gene id'].isin(common_gene_ids)]

merged_data = pd.merge(filtered_gene_expression_data, filtered_methylation_data, on='gene id')
merged_data = merged_data.T

merged_data = merged_data.apply(pd.to_numeric, errors='coerce')
merged_data = merged_data.dropna()
merged_data = merged_data.astype(int)
X = merged_data.iloc[:, :-1]
y= merged_data.iloc[:, -1]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = GaussianNB(var_smoothing= 1e-09)
model.fit(X_train,y_train)
predictions = model.predict(X_test)

accuracy = accuracy_score(y_test, predictions)
print("Accuracy:", accuracy)

print("\nClassification Report:")
print(classification_report(y_test, predictions))
